with box_items as 
(
  select
  country,
  transaction_date,
  email_address,
  transaction_id ,
  config_sku,
  case when config_sku in (
    "FODVEGBAR",
    "FODBLBAR20PACK",
    "FODLEG12PCK", 
    "FODLODLEG", 
    "ACCSILSHAK", 
    "ACCGOLDSTEEL", 
    "ACCORASHAK", 
    "ACCWHISHAKE", 
    "ACCSHKGEN") then item_quantity end as boxed,
   case when config_sku in (
    "FODVEGBAR",
    "FODBLBAR20PACK",
    "FODLEG12PCK", 
    "FODLODLEG", 
    "ACCSILSHAK", 
    "ACCGOLDSTEEL", 
    "ACCORASHAK", 
    "ACCWHISHAKE", 
    "ACCSHKGEN") then config_sku end as boxed_sku,
  case when config_sku not in (
    "FODVEGBAR",
    "FODBLBAR20PACK",
    "FODLEG12PCK", 
    "FODLODLEG", 
    "ACCSILSHAK", 
    "ACCGOLDSTEEL", 
    "ACCORASHAK", 
    "ACCWHISHAKE", 
    "ACCSHKGEN") then item_quantity end as non_boxed,  
  from `data_marts.transaction_products_p`
  where 1=1
    and country in ("UK","FR","IE","DE")
    and transaction_date between "2024-04-08" and "2025-04-08"
),
transactions_with_metrics as
(
  select 
  country,
  transaction_date,
  transaction_id,
  email_address,
  string_agg(distinct boxed_sku, "|" order by boxed_sku) as boxed_skus,
  ifnull(sum(boxed),0) as num_boxed_items,
  ifnull(sum(non_boxed),0) as num_non_boxed_items,
  ifnull(sum(boxed),0) + ifnull(sum(non_boxed),0) as num_total_items
  from box_items
  group by country, transaction_date, transaction_id, email_address
),
transactions_with_pre_boxed as -- Change here !
(
  select * 
  from transactions_with_metrics
  where 1=1
  -- and boxed_skus like '%FODLODLEG%'
  and num_non_boxed_items >= 1
),
quality_issues as 
(
  select distinct magento_order, 
  from `data_marts.quality_issues` t1
  where item_quality_issue_type_name  = "Packaging â€“ Hole/ split"
),
quality_issues_date as 
(
  select t1.magento_order, t2.date,
  case when t2.transaction_count = 1 then transaction_count end as new_customer_quality_issue
  from quality_issues  t1
  inner join `data_marts.transactions` t2 on t1.magento_order = t2.transaction_id 
),
holes_boxed as 
(
  select 
  t1.country,
  t1.email_address,
  t1.transaction_date,
  t1.transaction_id as preboxed,
  t2.magento_order as quality_issues,
  t2.new_customer_quality_issue,
  t1.boxed_skus,
  t1.num_boxed_items,
  from transactions_with_pre_boxed t1
  left join quality_issues_date t2
    on t1.transaction_date = t2.date
    and t1.transaction_id = t2.magento_order
),
refunds_filtered as 
(
  select t1.*
  from `tpw-data-warehouse.data_marts.refunds_all_dates_all_countries` t1
  inner join `data_marts.quality_issues` t2 on t1.magento_order = t2.magento_order
  where t2.config_sku not in (
    "FODVEGBAR",
    "FODBLBAR20PACK",
    "FODLEG12PCK", 
    "FODLODLEG", 
    "ACCSILSHAK", 
    "ACCGOLDSTEEL", 
    "ACCORASHAK", 
    "ACCWHISHAKE", 
    "ACCSHKGEN")
),
holes_boxed_refund as
(
  select t1.* ,
  t2.magento_order as refund,
  t2.refund_amount 
  from holes_boxed t1
  left join `tpw-data-warehouse.data_marts.refunds_all_dates_all_countries` t2
    on t1.quality_issues = t2.magento_order
),
emails as 
(
select t1.email_address, t1.transaction_id, t1.transaction_date, config_sku from `data_marts.transaction_products` t1
inner join holes_boxed_refund t2 on t1.transaction_id = t2.quality_issues
-- inner join `data_marts.zero_orders` t3 on t1.transaction_id = t3.transaction_id 
-- where t3.issue_name = "Product Quality / Damaged" 
),

transactions as
(
  select 
  t1.transaction_id as quality_issue ,
  t1.transaction_date as initial_date,
  t1.config_sku as damaged_sku,
  t2.transaction_id,
  t2.config_sku as zero_order_sku,
  t2.price_sold_gbp,
  dense_rank() over ( partition by t1.transaction_id order by t2.transaction_date asc) as rank
  from emails t1
  left join `data_marts.transaction_products`t2 
    on t1.email_address = t2.email_address
    and t1.transaction_date < t2.transaction_date
    and t1.config_sku = t2.config_sku
    and t2.price_sold_gbp = 0
  where t2.price_sold_gbp = 0
  -- and t1.quality_issues is not null
),
de_duplicate as
(
  select distinct quality_issue , transaction_id , zero_order_sku, price_sold_gbp
  from transactions
  where rank = 1
),
de_duplicate_costs as
(
  select 
  t1.*,
  ifnull(delivery_internal_cost_gbp,0) + ifnull(product_materials_cost,0) +  ifnull(product_labour_cost,0) +ifnull(product_packaging_cost,0) + ifnull(cpu_cost,0) as zero_order_value
  from de_duplicate t1
  left join `data_marts.transactions` t2
    on t1.transaction_id = t2.transaction_id 
),
de_duplicated_de_duplicated_costs as
(
  select 
  quality_issue,
  string_agg(zero_order_sku,"|" order by zero_order_sku) as zero_order_sku,
  string_agg(transaction_id,"|" order by transaction_id) as transaction_id,
  sum(zero_order_value) as zero_order_value
  from de_duplicate_costs
  group by quality_issue
),
holes_boxed_refund_zero as 
(
  select 
  t1.*,
  t2.transaction_id as zero_order_transaction_id,
  t2.zero_order_sku as zero_order_sku,
  t2.zero_order_value
  from holes_boxed_refund t1
  left join de_duplicated_de_duplicated_costs t2
  on t1.quality_issues = t2.quality_issue
),
results as
(
  select 
  "FODVEGBAR" as SKU,
  country,
  count(distinct preboxed) as contains_preboxd,
  count(distinct quality_issues) as complaints,
  sum(new_customer_quality_issue) as new_customer_quality_issue,
   sum(new_customer_quality_issue)/ count(distinct quality_issues) as new_customer_percent,
  safe_divide(count(distinct quality_issues) , count(distinct preboxed)) * 1000 as count_per_k,
  count(distinct zero_order_transaction_id ) as zero_orders,
  sum(zero_order_value) as zero_order_value,
  count(distinct refund) as refund,
  sum(refund_amount) as refund_amount
  from holes_boxed_refund_zero
  where boxed_skus is not null # '%FODVEGBAR%'
  group by country #, SKU
),
results_by_country as
(
  select 
  "FODVEGBAR" as SKU,
  country,
  count(distinct preboxed) as contains_preboxd,
  count(distinct quality_issues) as complaints,
  sum(new_customer_quality_issue) as new_customer_quality_issue,
  safe_divide(count(distinct quality_issues) , count(distinct preboxed)) * 1000 as count_per_k,
  count(distinct refund) as refund,
  sum(refund_amount) as refund_amount,
  count(distinct zero_order_transaction_id ) as zero_orders,
  sum(zero_order_value) as zero_order_value
  from holes_boxed_refund_zero
  where boxed_skus like '%FODVEGBAR%'
  group by country , SKU

  union all 

    select 
  "FODBLBAR20PACK" as SKU,
  country,
  count(distinct preboxed) as contains_preboxd,
  count(distinct quality_issues) as complaints,
  sum(new_customer_quality_issue) as new_customer_quality_issue,
  safe_divide(count(distinct quality_issues) , count(distinct preboxed)) * 1000 as count_per_k,
  count(distinct refund) as refund,
  sum(refund_amount) as refund_amount,
  count(distinct zero_order_transaction_id ) as zero_orders,
  sum(zero_order_value) as zero_order_value
  from holes_boxed_refund_zero
  where boxed_skus like '%FODBLBAR20PACK%'
  group by country , SKU

  union all 

    select 
  "FODLODLEG" as SKU,
  country,
  count(distinct preboxed) as contains_preboxd,
  count(distinct quality_issues) as complaints,
  sum(new_customer_quality_issue) as new_customer_quality_issue,
  safe_divide(count(distinct quality_issues) , count(distinct preboxed)) * 1000 as count_per_k,
  count(distinct refund) as refund,
  sum(refund_amount) as refund_amount,
  count(distinct zero_order_transaction_id ) as zero_orders,
  sum(zero_order_value) as zero_order_value
  from holes_boxed_refund_zero
  where boxed_skus like '%FODLODLEG%'
  group by country , SKU
)

select * from results

-- select * 
-- from holes_boxed_refund_zero
-- where num_boxed_items <> 0
-- select * 
-- from de_duplicate_costs
-- where quality_issue = "11414254249400"



-- select * 
-- from holes_boxed_refund
-- where 1=1 
-- -- and refund is not null 
-- and boxed_skus like '%FODVEGBAR%'
